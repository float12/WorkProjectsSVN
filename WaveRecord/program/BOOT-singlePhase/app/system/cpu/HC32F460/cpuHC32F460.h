//----------------------------------------------------------------------
//Copyright (C) 2016-2026 烟台东方威思顿电气股份有限公司电表软件研发部 
//创建人	胡春华
//创建日期	2016.8.30
//描述		cpu头文件
//修改记录	
//----------------------------------------------------------------------
#ifndef __CPUHC32F460_H
#define __CPUHC32F460_H

#if ( (CPU_TYPE == CPU_HC32F460) )

#include <stdio.h>
#include ".\Libraries\hc32f460.h"
#include ".\Libraries\hc32_ddl.h"
#include ".\Libraries\hc32f460_timera.h"
#include ".\Libraries\hc32f460_gpio.h"

//-----------------------------------------------
//				宏定义
//-----------------------------------------------
//---------程序比对用到的一些宏定义------------------------
#define PROGRAMSTA		0x000000	//程序空间起始地址
#define PROGRAMEND		0x07ffff	//程序空间结束地址
#define PROGRAMPROZ		0x07f000	//程序保护区
#define PROGRAMPROZ1	0x07fc00	//程序保护区

#define PROGRAM_FLASH_SECTOR	1024//程序空间一个扇区大小1k

#define WAIT_SPI_OVER		asm("nop")

#define CLEAR_WATCH_DOG					WDT_RefreshCounter() //HT_WDT->WDTSET = 0xAA3F//FeedWDT per 4s

#define ENABLE_CPU_INT					__enable_irq()
#define DISABLE_CPU_INT					__disable_irq()

//禁止实时时钟中断（注意不是禁止实时时钟）
#define DISABLE_CLOCK_INT				;
//允许实时时钟中断
#define ENABLE_CLOCK_INT				;

//禁止中断
#define DISABLE_SYSTICK_INT				;
//允许中断
#define ENABLE_SYSTICK_INT				;

#define	SPD_22000K		0
#define	SPD_11000K		1
#define	SPD_5500K		2

#if( MAX_PHASE == 3 )
#define SPD_MCU			SPD_22000K		// 重新测试I2C时序 !!!!!!
#else
#define SPD_MCU			SPD_11000K
#endif

#define SINGLE_LOW_POWER_SPD_MCU	SPD_5500K //单相低功耗时钟频率 仅用于C_SysTickLoad的计算

#define SYS_TICK_PERIOD_MS		10//单位ms 要能被1000整除


#define EnWr_WPREG()		//HT_CMU->WPREG = 0xA55A//关闭写保护功能							
#define DisWr_WPREG()		//HT_CMU->WPREG = 0x0000//开启写保护功能							

#define Goto_Sleep()		//SCB->SCR = 0x0004;__WFI();__NOP();				
#define Hold_Sleep()		//SCB->SCR = 0x0000;__WFI();__NOP();				

#define Reset_CPU()			NVIC_SystemReset()	
#define RESET_STACK_POINTER	//__set_SP( 0x20008000 )	

#define SCI_MCU_USART0_NUM			0
#define SCI_MCU_USART1_NUM			0
#define SCI_MCU_USART2_NUM			1
#define SCI_MCU_USART3_NUM			2
#define SCI_MCU_USART4_NUM			3
#define SCI_MCU_USART5_NUM			4
#define SCI_MCU_USART6_NUM			5
//-----------------------------------------------
//				结构体，共用体，枚举
//-----------------------------------------------
typedef struct port_init
{
	en_port_t enPort; 
	uint16_t u16Pin;
	uint8_t FuncReg;
    stc_port_init_t GpioReg;
    uint8_t bLevel;
}port_init_t;

//电源及电池AD
typedef enum{
	eOther_AD_BAT,			//电池电压监测
	eOther_AD_PWR,			//电源电压监测
	eOther_AD_Max,
}eType_ADC;
//-----------------------------------------------
//				变量声明
//-----------------------------------------------

//-----------------------------------------------
// 				函数声明
//-----------------------------------------------
//-----------------------------------------------
//函数功能: 毫秒延时函数
//
//参数: 	ms[in]		需要延时的毫秒数
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_Delayms(WORD ms);

//-----------------------------------------------
//函数功能: 100微秒延时函数
//
//参数: 	us[in]		需要延时的100微秒数
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_Delay100us(WORD us);

//-----------------------------------------------
//函数功能: 10微秒延时函数
//
//参数: 	us[in]		需要延时的10微秒数
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_Delay10us(WORD us);

//-----------------------------------------------
//函数功能: 通过NOP进行延时函数
//
//参数: 	Step[in]		需要延时的NOP个数
//                    
//返回值:  	无
//
//备注:   !!!!!!该函数另有一个函数指针调用方式，至少要保留一个地方采用函数名调用方式 !!!!!!
//-----------------------------------------------
void api_DelayNop(BYTE Step);

//-----------------------------------------------
//函数功能: CPU系统时钟初始化函数，模块内函数
//
//参数: 	Type[in]		ePowerOnMode:正常上电  ePowerDownMode:低功耗
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_MCU_SysClockInit( ePOWER_MODE Type );

//-----------------------------------------------
//函数功能: 获取波特率参数
//
//参数: 	Type[in]		0:初始化时用波特率 1：平时读波特率
//          SciPhNum[in]	物理串口号
//
//返回值:  	波特率参数值
//
//备注:   
//-----------------------------------------------
BYTE api_GetBaudRate(BYTE Type, BYTE SciPhNum);

//-----------------------------------------------
//函数功能: 处理更改波特率后的串口初始化
//
//参数: 	Channel[in]		逻辑串口号 0：第一485  1：红外  2：模块
//
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void DealSciFlag( BYTE Channel );

//-----------------------------------------------
//函数功能: 串口初始化
//
//参数: 
//			Channel[in]		逻辑串口号 0：第一485  1：红外  2：模块
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_InitSci( BYTE Channel );

//-----------------------------------------------
//函数功能: 禁止指定串口接收
//
//参数: 
//			p[in]		需要禁止串口的指针
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
//void api_DisableRece(TSerial * p);

//-----------------------------------------------
//函数功能: 允许指定接口接收
//
//参数: 
//			p[in]		需要允许串口的指针
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
//void api_EnableRece(TSerial * p);

//-----------------------------------------------
//函数功能: 广播命令无应答的情况下串口恢复接收
//
//参数: 
//			Channel[in]		逻辑串口号 0：第一485  1：红外  2：模块
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_ProSciTimer( BYTE Channel );

//-----------------------------------------------
//函数功能: CPU初始化
//
//参数: 	无
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_InitCPU( void );

//-----------------------------------------------
//函数功能: RTC的中断使能
//
//参数: 	Type[in]		0:秒 分 时中断开启  1:秒中断开启
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_MCU_RTCInt( void );

//-----------------------------------------------
//函数功能:     systick定时器初始化函数
//
//参数: 	 	Type[in]		ePowerOnMode:正常上电   ePowerDownMode:低功耗
//                    
//返回值:  	无
//
//备注:       ePowerDownMode模式 仅用于单相
//-----------------------------------------------
void api_InitSysTickTimer( ePOWER_MODE Type);

//-----------------------------------------------
//函数功能: 关闭和恢复中断
//
//参数: 
//			Data[in]		0:关闭中断  其他（关闭前记录的数据）：恢复中断
//                    
//返回值:  	关闭前的中断状态
//
//备注:   
//-----------------------------------------------
BYTE api_splx(BYTE Data);

//-----------------------------------------------
//函数功能: 初始化SPI总线
//
//参数:
//			Component[in]	元器件eCOMPONENT_TYPE
//			Type[in]		SPI的模式  eSPI_MODE_0/eSPI_MODE_1/eSPI_MODE_2/eSPI_MODE_3分别对应SPI的模式0/1/2/3
//返回值:  	无
//
//备注:
//-----------------------------------------------
void api_InitSPI( eCOMPONENT_TYPE Component, eSPI_MODE Type );

//-----------------------------------------------
//函数功能: 非中断方式下写SPI的函数
//
//参数: 
//			Data[in]		写入的值
//                    
//返回值:  	读出的值
//
//备注:   
//-----------------------------------------------
BYTE api_UWriteSpi(eCOMPONENT_TYPE Component, BYTE Data);

#if(SEL_TIMER_PLUSE_FUNC == YES )
//-----------------------------------------------
//函数功能: 使能通过定时器发送脉冲功能
//
//参数:       无
//
//返回值: 	  无
//
//备注:使能对应的定时器中断
//-----------------------------------------------
void api_EnableTimerPluseFunc( void );

//-----------------------------------------------
//函数功能: 关闭通过定时器发送脉冲功能
//
//参数:       无
//
//返回值: 	  无
//
//备注:关闭对应的定时器中断
//-----------------------------------------------
void api_DisableTimerPluseFunc( void );
#endif//#if(SEL_TIMER_PLUSE_FUNC == YES )

//-----------------------------------------------
//函数功能: 获取芯片类型
//
//参数:
//
//返回值:   0x55: H版   0x00：G版
//
//备注:关闭对应的定时器中断
//-----------------------------------------------
BYTE api_GetCpuVersion( void );

//-----------------------------------------------
//函数功能: 计算cpu Flash的累加和，采用word相加模式
//
//参数: 	Type[in]0--程序区间Sum和	1--保护区参数Sum和	ff--全部flash区间Sum和
//                    
//返回值:  	计算的word累加和
//
//备注:95ms   
//-----------------------------------------------
WORD api_CheckCpuFlashSum(BYTE Type);

//-----------------------------------------------
//函数功能: 初始化ADC
//
//参数:
//			
//返回值:  	无
//
//备注:
//-----------------------------------------------
void api_InitAdc(void);

//-----------------------------------------------
//函数功能: 获取AD数据
//
//参数:	Type:AD类型
//			
//返回值:  	无
//
//备注:eOther_AD_PWR，eOther_AD_BAT:电源及电池电压检测
//-----------------------------------------------
WORD api_GetADData(eType_ADC Type);

//-----------------------------------------------
//函数功能: 读取cpu内ram及片上flash数据
//
//参数: 	Type[in]	0--Ram 	1--flash
//          Addr[in]	地址 
//			Len[in]		读取长度    
//			Buf[out]	输出缓冲     
//
//返回值:  	读取数据的长度，如果为0，表示读取失败
//
//备注:   
//-----------------------------------------------
BYTE api_ReadCpuRamAndInFlash(BYTE Type, DWORD Addr, BYTE Len, BYTE *Buf);

//-----------------------------------------------
//函数功能: 串口接收中断函数
//
//参数: 	SCI_Ph_Num[in]	物理串口号
//          Data[in]		接收到的数据
//
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void USARTx_Rcv_IRQHandler(BYTE SCI_Ph_Num, BYTE Data);

//-----------------------------------------------
//函数功能: 串口发送中断函数
//
//参数: 	SCI_Ph_Num[in]	物理串口号
//          USARTx[in]		对应的串口指针
//
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void USARTx_Send_IRQHandler(BYTE SCI_Ph_Num, M4_USART_TypeDef *USARTx);

//-----------------------------------------------
//函数功能: 规约写升级程序信息头
//
//参数: 	pBuf[in] 输入缓冲     
//
//返回值:  	无
//
//备注: 规约见《电表软件平台扩展规约》附录C  
//-----------------------------------------------
void api_WriteUpdateProgHead(BYTE *pBuf);

//-----------------------------------------------
//函数功能: 规约写升级程序数据
//
//参数: 	pBuf[in] 输入缓冲     
//
//返回值:  	TRUE/FALSE
//
//备注: 规约见《电表软件平台扩展规约》附录C  
//-----------------------------------------------
BOOL api_WriteUpdateProgMessage(BYTE *pBuf);

//-----------------------------------------------
//函数功能: 启动程序升级
//
//参数: 	pBuf[in] 输入缓冲     
//
//返回值:  	此函数最后会执行数据转存及软复位
//
//备注: 规约见《电表软件平台扩展规约》附录C  
//-----------------------------------------------
void api_StartUpdateProgMessage(BYTE *pBuf);

#endif//#if ( (CPU_TYPE == CPU_HC32F460) )

#endif//#ifndef __CPUHT6025_H
