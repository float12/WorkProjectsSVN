//----------------------------------------------------------------------
//Copyright (C) 2016-2026 烟台东方威思顿电气股份有限公司电表软件研发部 
//创建人	胡春华
//创建日期	2016.8.11
//描述		存储器大小定义、安全空间和连续空间分配
//修改记录	
//----------------------------------------------------------------------
#ifndef __SAVEMEM_H
#define __SAVEMEM_H

//-----------------------------------------------
//				宏定义
//-----------------------------------------------

//-----------------------------------------------
//				结构体，共用体，枚举
//-----------------------------------------------

//-----------------------------------------------
//				变量声明
//-----------------------------------------------

//-----------------------------------------------
// 				函数声明
//-----------------------------------------------
//
//--------------------------------------------------
//功能描述:  对缓冲内的数据取反
//
//参数:      p[in] 			数据的缓冲
//
//           Length[in]		数据长度
//
//返回值:
//
//备注内容:  无
//--------------------------------------------------
void ReverseInData( BYTE *p, WORD Length ); 

//-----------------------------------------------
//函数功能: 写EEPROM函数，模块内函数
//
//参数: 
//			No[in]			指定写哪一片EEPROM
//							CS_SPI_256401：第一片
//							CS_SPI_256402：第二片
//			Addr[in]		要写入的起始地址
//			Length[in]		要写入数据的长度
//			Buf[in]			要写入数据的缓冲
//                    
//返回值:  	TRUE:写入正确	FALSE:写入错误
//
//备注:   
//-----------------------------------------------
BOOL UWriteAt25640(WORD No, DWORD Addr, WORD Length, BYTE * Buf);


//-----------------------------------------------
//函数功能: 读EEPROM函数，模块内函数
//
//参数: 
//			No[in]			指定读哪一片EEPROM
//							CS_SPI_256401：第一片
//							CS_SPI_256402：第二片
//			Addr[in]		要读出的起始地址
//			Length[in]		要读出数据的长度
//			Buf[in/out]		要读出数据的缓冲
//                    
//返回值:  	TRUE:读出正确	FALSE:读出错误
//
//备注:   
//-----------------------------------------------
BOOL UReadAt25640(WORD No, DWORD Addr, WORD Length, BYTE * Buf);


//-----------------------------------------------
//函数功能: 读第一片EEPROM函数，模块内函数
//
//参数: 
//			Addr[in]		要读出的起始地址
//			Length[in]		要读出数据的长度
//			Buf[in/out]		要读出数据的缓冲
//                    
//返回值:  	TRUE:读出正确	FALSE:读出错误
//
//备注:   
//-----------------------------------------------
WORD ReadEEPRom1(WORD Addr, WORD Length, BYTE * Buf);


//-----------------------------------------------
//函数功能: 读第二片EEPROM函数，模块内函数
//
//参数: 
//			Addr[in]		要读出的起始地址
//			Length[in]		要读出数据的长度
//			Buf[in/out]		要读出数据的缓冲
//                    
//返回值:  	TRUE:读出正确	FALSE:读出错误
//
//备注:   
//-----------------------------------------------
WORD ReadEEPRom2(WORD Addr, WORD Length, BYTE * Buf);


//-----------------------------------------------
//函数功能: 写第一片EEPROM函数，模块内函数
//
//参数: 
//			Addr[in]		要写入的起始地址
//			Length[in]		要写入数据的长度
//			Buf[in]			要写入数据的缓冲
//                    
//返回值:  	TRUE:写入正确	FALSE:写入错误
//
//备注:   
//-----------------------------------------------
WORD WriteEEPRom1(WORD Addr, WORD Length, BYTE * Buf);


//-----------------------------------------------
//函数功能: 写第二片EEPROM函数，模块内函数
//
//参数: 
//			Addr[in]		要写入的起始地址
//			Length[in]		要写入数据的长度
//			Buf[in]			要写入数据的缓冲
//                    
//返回值:  	TRUE:写入正确	FALSE:写入错误
//
//备注:   
//-----------------------------------------------
WORD WriteEEPRom2(WORD Addr, WORD Length, BYTE * Buf);


//-----------------------------------------------
//函数功能: 同时写两片EEPROM函数，数据不取反，模块内函数
//
//参数: 
//			Addr[in]		要写入的起始地址
//			Length[in]		要写入数据的长度
//			Buf[in]			要写入数据的缓冲
//                    
//返回值:  	TRUE:写入正确	FALSE:写入错误
//
//备注:   
//-----------------------------------------------
WORD WriteDoubleEEPRom( WORD Addr, WORD Length, BYTE * Buf );


//--------------------------------------------------
//功能描述:  对两个带校验的缓冲进行处理
//         
//参数:    	p1[in] 			缓冲1
//         	p2[in] 			缓冲2
//          Size[in]		数据长度，包含校验
//         
//返回值:  TRUE:  	两缓冲一致，且校验通过
//         FSTA2:	两个缓冲不相等，但校验都通过
//         FSTA3:	两个缓冲不相等且第一个校验正确,第二个校验不正确
//         FSTA4:	两个缓冲不相等且第二个校验正确,第一个校验不正确
//         FALSE:	两个缓冲不相等且校验都没有通过
//备注内容:  无
//--------------------------------------------------
WORD ProcDoubleBuf( BYTE * p1, BYTE * p2, WORD Size );

//-----------------------------------------------
//函数功能: 初始化EEPROM函数，模块内函数
//
//参数: 	无
//                    
//返回值: 	无
//
//备注:   
//-----------------------------------------------
void InitEEPRom(void);


#endif//#ifndef __SAVEMEM_H


