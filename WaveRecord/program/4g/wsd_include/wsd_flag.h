//----------------------------------------------------------------------
//Copyright (C) 2003-20XX 烟台东方威思顿电气有限公司电表软件研发部 
//创建人	
//创建日期	
//描述		FLAG头文件
//修改记录	
//----------------------------------------------------------------------
#ifndef __FLAG_H
#define __FLAG_H

//-----------------------------------------------
//				宏定义
//-----------------------------------------------
#define		MAX_SYS_STATUS_NUM		64		//必须为8的倍数
//-----------------------------------------------
//				结构体，共用体，枚举
//-----------------------------------------------
typedef enum
{//							序号	秒分配范围
 	eTASK_SAMPLE_ID = 0,	//0		
	eTASK_PARA_ID,			//1		
	
	
	////!!!!!!这个必须放最后，不要挪动,此序号最大为16（目前只分配了一个WORD），不要再超过次数!!!!!!
	eTASK_ID_NUM_T
	
}TTaskIDNum;

//每个任务标志定义
typedef enum
{
	eFLAG_SECOND = 0,
	eFLAG_HALF_MINUTE,
	eFLAG_MINUTE,
	eFLAG_HOUR,

	eFLAG_TIMER_T,////!!!!!!这个必须放最后，不要挪动!!!!!!

}eTaskTimeFlag;

typedef struct TFlagBytes_t
{
	//任务标志，暂定最大16个任务，即每个时间标志占2个字节
	BYTE TaskTimeFlag[eFLAG_TIMER_T];
	// 系统状态
	BYTE SysStatus[MAX_SYS_STATUS_NUM / 8];
}TFlagBytes;

typedef enum
{
	// 采集数据上传标志
	eSYS_STASUS_SAMPLE_UPLOAD,
	// 采集时间到开始采集的标志
	eSYS_STASUS_START_COLLECT,
	// 电表升级成功回复一帧
	eSYS_STASUS_UPGRADE_REPLY_FRAME,
	// 单次定时器时间到标志
	eSYS_STASUS_TIMER_UP,
	// 开始透传标志
	eSYS_STASUS_START_TRAN,
	//串口空闲标志
	eSYS_STASUS_UART_IDLE,
	//!!!!!!这个必须放最后，不要挪动!!!!!!
	eSYS_STATUS_NUM_T,
} eSysStatusFlag;
//-----------------------------------------------
//				变量声明
//-----------------------------------------------
extern TFlagBytes FlagBytesRam;
//-----------------------------------------------
// 				函数声明
//-----------------------------------------------

//--------------------------------------------------
//功能描述:  给所有任务清除同一个标志
//         
//参数:      
//         
//返回值:    
//         
//备注:  
//--------------------------------------------------
void  api_ClrAllTaskFlagRam(void);
//-----------------------------------------------
//函数功能: 给所有任务置同一个标志
//
//参数: 
//			FlagID[in]		标志号
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_SetAllTaskFlagRam( BYTE FlagID );

//-----------------------------------------------
//函数功能: 获取任务标志
//
//参数: 
//			TaskID[in]		任务号
//			FlagID[in]		标志号
//                    
//返回值:  	TRUE:相应标志置位了  FALSE:相应标志未置位
//
//备注:   
//-----------------------------------------------
BOOL api_GetTaskFlag( TFlagBytes *FlagByte, BYTE TaskID, BYTE FlagID );

//-----------------------------------------------
//函数功能: 清除任务标志
//
//参数: 
//			TaskID[in]		任务号
//			FlagID[in]		标志号
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_ClrTaskFlag( TFlagBytes *FlagByte, BYTE TaskID, BYTE FlagID );
//-----------------------------------------------
//函数功能: 设置系统状态
//
//参数: 
//			StatusNo[in]		系统状态号
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_SetSysStatus(BYTE StatusNo);
//-----------------------------------------------
//函数功能: 清除系统状态
//
//参数: 
//			StatusNo[in]		系统状态号
//                    
//返回值:  	无
//
//备注:   
//-----------------------------------------------
void api_ClrSysStatus(BYTE StatusNo);
//-----------------------------------------------
//函数功能: 获取系统状态
//
//参数: 
//			StatusNo[in]		系统状态号
//                    
//返回值:  	TRUE:系统状态置位了 FALSE:系统状态未置位
//
//备注:   
//-----------------------------------------------
BOOL api_GetSysStatus(BYTE StatusNo);
#endif //#ifndef __FLAG_H
